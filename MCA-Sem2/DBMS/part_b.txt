1. Create the tables.
	1.1. CREATE TABLE BRANCH (
			branchid INT PRIMARY KEY,
			bname VARCHAR(255),
			hod VARCHAR(255)
		);
	1.2. CREATE TABLE STUDENT (
			usn INT PRIMARY KEY,
			name VARCHAR(255),
			address VARCHAR(255),
			branchid INT,
			sem INT,
			FOREIGN KEY (branchid) REFERENCES BRANCH(branchid)
		);
	1.3. CREATE TABLE AUTHOR (
			authorid INT PRIMARY KEY,
			aname VARCHAR(255),
			country VARCHAR(255),
			age INT
		);
	1.4. CREATE TABLE BOOK (
			bookid INT PRIMARY KEY,
			bookname VARCHAR(255),
			authorid INT,
			publisher VARCHAR(255),
			branchid INT,
			FOREIGN KEY (authorid) REFERENCES AUTHOR(authorid),
			FOREIGN KEY (branchid) REFERENCES BRANCH(branchid)
		);
	1.5. CREATE TABLE BORROW (
			usn INT,
			bookid INT,
			borrowdate DATE,
			FOREIGN KEY (usn) REFERENCES STUDENT(usn),
			FOREIGN KEY (bookid) REFERENCES BOOK(bookid)
		);

2. inserting records into tables
	2.1. INSERT INTO BRANCH (branchid, bname, hod) VALUES
			(1, 'Computer Science', 'John Smith'),
			(2, 'Mechanical Engineering', 'Jane Doe'),
			(3, 'Electrical Engineering', 'Bob Williams'),
			(4, 'Civil Engineering', 'Alice Johnson'),
			(5, 'Chemical Engineering', 'Peter Brown');

	2.2. INSERT INTO STUDENT (usn, name, address, branchid, sem) VALUES
			(1, 'Bob Smith', '123 Main St', 1, 3),
			(2, 'Alice Johnson', '456 Market Ave', 1, 4),
			(3, 'John Williams', '789 Market St', 2, 2),
			(4, 'Jane Brown', '321 Market St', 2, 3),
			(5, 'Peter Smith', '654 Main Ave', 3, 4);

	2.3. INSERT INTO AUTHOR (authorid, aname, country, age) VALUES
			(1, 'John Smith', 'USA', 35),
			(2, 'Jane Doe', 'UK', 40),
			(3, 'Bob Williams', 'USA', 45),
			(4, 'Alice Johnson', 'Canada', 30),
			(5, 'Peter Brown', 'USA', 50);

	2.4. INSERT INTO BOOK (bookid, bookname, authorid, publisher, branchid) VALUES
			(1, 'Programming 101', 1, 'Pearson', 1),
			(2, 'Data Structures and Algorithms', 1, 'McGraw-Hill', 1),
			(3, 'Mechanical Engineering Handbook', 2, 'Wiley', 2),
			(4, 'Electrical Engineering Fundamentals', 3, 'Springer', 3),
			(5, 'Structural Analysis and Design', 4, 'CRC Press', 4);

	2.5. INSERT INTO BORROW (usn, bookid, borrowdate) VALUES
			(1, 1, '2022-01-01'),
			(2, 2, '2022-02-01'),
			(3, 3, '2022-03-01'),
			(4, 4, '2022-04-01'),
			(5, 5, '2022-05-01');

3.
	3.1
		select usn, name, bname, aname, borrowdate from student
		join borrow using (usn)
		join book using (bookid)
		join author using (authorid)
		where sem = 2;

4.
	4.1.
	select * from student
	where usn in (
		select usn from borrow
		group by usn
		having count(usn) >1
	);
	4.2.
		SELECT s.usn, s.name, s.address, bo.bname, a.aname
		FROM STUDENT s
		JOIN BORROW b ON s.usn = b.usn
		JOIN BOOK bo ON b.bookid = bo.bookid
		JOIN AUTHOR a ON bo.authorid = a.authorid
		WHERE s.usn IN (
			SELECT s.usn
			FROM STUDENT s
			JOIN BORROW b ON s.usn = b.usn
			JOIN BOOK bo ON b.bookid = bo.bookid
			JOIN AUTHOR a ON bo.authorid = a.authorid
			GROUP BY s.usn
			HAVING COUNT(DISTINCT a.authorid) = 1
		)
		ORDER BY s.usn;

5.
	5.1.
		select bname from book order by bname desc

	5.2.
		SELECT s.usn, s.name, s.address, bo.bname, bo.publisher
		FROM STUDENT s
		JOIN BORROW b ON s.usn = b.usn
		JOIN BOOK bo ON b.bookid = bo.bookid
		WHERE s.usn IN (
			SELECT s.usn
			FROM STUDENT s
			JOIN BORROW b ON s.usn = b.usn
			JOIN BOOK bo ON b.bookid = bo.bookid
			GROUP BY s.usn
			HAVING COUNT(DISTINCT bo.publisher) = 1
		);
	
6.
	6.1.
		CREATE TABLE students (
			usn int(10) PRIMARY KEY,
			name varchar(255) NOT NULL,
			dob date,
			branch varchar(255),
			m1 int(3),
			m2 int(3),
			m3 int(3),
			total int(3),
			gpa float(2,2)
		);
	6.2.
		UPDATE students
		SET m1=88, m2=92, m3=97
		WHERE usn=1;
	
7.
	7.1.
		select GPA,name from student;
	7.2.
		select name,dob from student where dob like '2000'

8.
	8.1.
		select name,branch from student where branch = 'bca';
	8.2.
		select branch, max(gpa) from student1;

9.
	9.1.
		select name from student where name like 'g%' order by name;
	9.2.
		update student set Total=mark2+mark1+mark3;

10.
	10.1.
		select name from student where name like '%a' order by name;
	10.2.
		delete from student where usn=1;